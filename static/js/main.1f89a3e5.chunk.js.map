{"version":3,"sources":["serviceWorker.js","components/Navbar/Navbar.js","components/MyStocks/MyStocksHeader.js","components/MyStocks/MyStockRow.js","env.js","components/MyStocks/MyStocks.js","components/Modal/Modal.js","components/AddStocks/AddStocks.js","components/Horizontal Line/HorizontalLine.js","components/StockWrapper.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","className","MyStocksHeader","props","MyStockRow","React","useState","currentPrice","setPrice","stock","removeMyStock","useEffect","symbol","stocksUrl","getStockPriceApi","fetch","then","res","text","parseFloat","split","isNaN","toFixed","catch","error","console","log","getCurrentPrice","key","name","shares","buyprice","buyPrice","noOfShares","buyPriceFloat","number","getProfit","id","onClick","MyStocks","createMyStockLIs","myStockArray","stockKey","stocks","isUser","push","map","handleDelete","bind","axios","put","data","updateStocks","this","Component","Modal","putRequest","document","getElementById","value","buydate","Axios","selectedStock","toggle","alert","show","type","min","placeholder","style","textAlign","AddStocks","state","stockList","isModalVisible","addStockHandler","setState","toggleModal","createStockLIs","stockLIs","HorizontalLine","StockWrapper","setStocks","fetchStocks","setFetchStocks","get","s","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6WAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCRSC,EARA,WACb,OACE,yBAAKC,UAAU,WACb,iE,0DCYSC,G,MAfQ,SAACC,GACtB,OACE,+BACE,4BACE,4CACA,0CACA,6CACA,yCACA,6CACA,2CACA,iCCyCOC,EAlDI,SAACD,GAAW,IAAD,EACKE,IAAMC,SAAS,GADpB,mBACrBC,EADqB,KACPC,EADO,KAEpBC,EAAyBN,EAAzBM,MAAOC,EAAkBP,EAAlBO,cAiBfL,IAAMM,WAAU,YAhBQ,SAACC,GACvB,IAAIC,ECFwB,SAACD,GAAD,oFACyCA,EADzC,mBAJT,mBAIS,iBDEZE,CAAiBF,GACjCG,MAAMF,GACHG,MAAK,SAACC,GAEL,OAAOA,EAAIC,UAEZF,MAAK,SAACC,GACL,IAAMV,EAAeY,WAAWF,EAAIG,MAAM,MAAM,GAAGA,MAAM,KAAK,IAC9DZ,EAASa,MAAMd,GAAgB,EAAIA,EAAae,QAAQ,OAEzDC,OAAM,SAACC,GAENC,QAAQC,IAAIF,MAIhBG,CAAgBlB,EAAMG,UACrB,CAACH,EAAMG,SASV,OACE,wBAAIgB,IAAKnB,EAAMG,QACb,4BAAKH,EAAMG,QACX,4BAAKH,EAAMoB,MACX,4BAAKpB,EAAMqB,QACX,4BAAKrB,EAAMsB,UACX,4BAAKxB,GACL,4BAfc,SAACyB,EAAUC,GAC3B,IAAMC,EAAgBb,MAAMF,WAAWa,IACnC,EACAb,WAAWa,GACTG,EAASd,MAAMF,WAAWc,IAAe,EAAId,WAAWc,GAE9D,OADe1B,EAAe4B,EAASD,EAAgBC,EAUhDC,CAAU3B,EAAMsB,SAAUtB,EAAMqB,SACrC,4BACE,4BACE7B,UAAU,kBACVoC,GAAI5B,EAAMG,OACV0B,QAAS5B,GAHX,oBEcO6B,E,4MAlDbC,iBAAmB,WACjB,IAAMC,EAAe,GACrB,IAAK,IAAIC,KAAY,EAAKvC,MAAMwC,OAAQ,CACtC,IAAMlC,EAAQ,EAAKN,MAAMwC,OAAOD,GAC3BjC,EAAMmC,QAGTH,EAAaI,KAAKpC,GAUtB,OAPiBgC,EAAaK,KAAI,SAACrC,GAAD,OAChC,kBAAC,EAAD,CACEmB,IAAKnB,EAAMG,OACXH,MAAOA,EACPC,cAAe,EAAKqC,aAAaC,KAAlB,eAA6BvC,S,EAKlDsC,aAAe,SAACtC,GACdwC,IACGC,IACC,mEACEzC,EAAMG,OACN,QACF,CACEA,OAAQH,EAAMG,OACdiB,KAAMpB,EAAMoB,KACZe,QAAQ,IAGX5B,MAAK,SAACC,GACLQ,QAAQC,IAAIT,EAAIkC,MAChB,EAAKhD,MAAMiD,mB,uDAKf,OACE,yBAAKnD,UAAU,YACb,yCACA,+BACE,kBAAC,EAAD,MACA,+BAAQoD,KAAKb,0B,GA5CAc,a,QC8FRC,G,wNA9FbC,WAAa,SAAC/C,GACZ,IAAIqB,EAAS2B,SAASC,eAAe,YAAYC,MAC7C5B,EAAW0B,SAASC,eAAe,YAAYC,MAC/CC,EAAUH,SAASC,eAAe,WAAWC,MAE7C7B,EAAS,GAAKC,EAAW,EAC3B8B,IAAMX,IACJ,mEACE,EAAK/C,MAAM2D,cAAclD,OAD3B,QAGA,CACEA,OAAQ,EAAKT,MAAM2D,cAAclD,OACjCiB,KAAM,EAAK1B,MAAM2D,cAAcjC,KAC/Be,QAAQ,EACRd,OAAQA,EACRC,SAAUA,EACV6B,QAASA,IAGV5C,MAAK,kBAAM,EAAKb,MAAMiD,kBACtBpC,MAAK,kBAAM,EAAKb,MAAM4D,YAEzBC,MAAM,gC,uDAIA,IAAD,WACP,OAAKX,KAAKlD,MAAM8D,KAId,oCACE,yBAAKhE,UAAU,gBACb,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,QAAQqC,QAAS,kBAAM,EAAKnC,MAAM4D,WAAlD,QAGA,6CAASV,KAAKlD,MAAM2D,qBAApB,aAAS,EAA0BjC,KAAnC,iBACA,6BACE,0BAAM5B,UAAU,eAAhB,kBACA,0BAAMA,UAAU,eAAhB,UACGoD,KAAKlD,MAAM2D,qBADd,aACG,EAA0BjC,OAG/B,6BACA,6BACA,6BACE,0BAAM5B,UAAU,eAAhB,mBACA,2BACEoC,GAAG,WACH6B,KAAK,SACLjE,UAAU,cACVkE,IAAI,IACJC,YAAY,mBAGhB,6BACA,6BACA,6BACE,0BAAMnE,UAAU,eAAhB,eACA,yBAAKA,UAAU,eACb,0CADF,OAEE,2BACEoC,GAAG,WACH6B,KAAK,SACLC,IAAI,IACJC,YAAY,gBAIlB,6BACA,6BACA,6BACE,0BAAMnE,UAAU,eAAhB,cACA,2BAAOoC,GAAG,UAAU6B,KAAK,OAAOjE,UAAU,iBAE5C,6BACA,6BACA,yBAAKoE,MAAO,CAAEC,UAAW,WACvB,4BACEjC,GAAG,cACHpC,UAAU,YACVqC,QAASe,KAAKG,WAAWR,KAAKK,KAAMA,KAAKlD,MAAM2D,gBAHjD,WAnDD,S,GA7BOR,cCwDLiB,E,4MAxDbC,MAAQ,CACNC,UAAW,GACXC,gBAAgB,G,EAGlBC,gBAAkB,SAAClE,GACjB,IAAIqD,EAAa,eAAQrD,GACzB,EAAKmE,SAAS,CACZF,gBAAgB,EAChBZ,mB,EAGJe,YAAc,WACZ,EAAKD,SAAS,CAAEF,gBAAgB,K,EAGlCI,eAAiB,WACf,IAAIC,EAAW,GACf,IAAK,IAAIrC,KAAY,EAAKvC,MAAMwC,OAAQ,CACtC,IAAMlC,EAAQ,EAAKN,MAAMwC,OAAOD,GAC5BjC,EAAMmC,QAGVmC,EAASlC,KACP,wBAAIjB,IAAKnB,EAAMG,QACb,4BACEX,UAAU,cACVoC,GAAI5B,EAAMG,OACV0B,QAAS,EAAKqC,gBAAgB3B,KAArB,eAAgCvC,IAExCA,EAAMG,QANX,OASE,8BAAOH,EAAMoB,MACb,6BACA,+BAIN,OAAOkD,G,uDAGP,OACE,yBAAK9E,UAAU,kBACb,uDACA,4BAAKoD,KAAKyB,kBACV,kBAAC,EAAD,CACEb,KAAMZ,KAAKmB,MAAME,eACjBZ,cAAeT,KAAKmB,MAAMV,cAC1BC,OAAQV,KAAKwB,YACbzB,aAAcC,KAAKlD,MAAMiD,oB,GAnDXE,a,MCET0B,MAHf,WACE,OAAO,yBAAK/E,UAAU,UCkCTgF,EA9BM,SAAC9E,GAAW,IAAD,EACFE,IAAMC,SAAS,IADb,mBACvBqC,EADuB,KACfuC,EADe,OAEQ7E,IAAMC,SAAS,GAFvB,mBAEvB6E,EAFuB,KAEVC,EAFU,KAe9B,OAXA/E,IAAMM,WAAU,WACdsC,IACGoC,ILVL,wEKWKrE,MAAK,SAACC,GACLiE,EAAUjE,EAAIkC,SAEf5B,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAEf,CAAC2D,IAGF,oCACE,kBAAC,EAAD,CACE/B,aAAc,kBAAMgC,GAAe,SAACE,GAAD,OAAOA,EAAI,MAC9C3C,OAAQA,IAEV,kBAAC,EAAD,MACA,kBAAC,EAAD,CACES,aAAc,kBAAMgC,GAAe,SAACE,GAAD,OAAOA,EAAI,MAC9C3C,OAAQA,MCxBhB4C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SVuHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrB5E,MAAK,SAAA6E,GACJA,EAAaC,gBAEdvE,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuE,c","file":"static/js/main.1f89a3e5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport \"./Navbar.css\";\nconst Navbar = () => {\n  return (\n    <div className=\"navhead\">\n      <strong>Financial Portfolio Tracker</strong>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst MyStocksHeader = (props) => {\n  return (\n    <thead>\n      <tr>\n        <th>Stock Symbol</th>\n        <th>Stock Name</th>\n        <th>No. Of Shares</th>\n        <th>Buy Price</th>\n        <th>Current Price</th>\n        <th>Profit/Loss</th>\n        <th></th>\n      </tr>\n    </thead>\n  );\n};\nexport default MyStocksHeader;\n","import React from \"react\";\nimport { getStockPriceApi } from \"../../env\";\n\nconst MyStockRow = (props) => {\n  const [currentPrice, setPrice] = React.useState(0);\n  const { stock, removeMyStock } = props;\n  const getCurrentPrice = (symbol) => {\n    var stocksUrl = getStockPriceApi(symbol);\n    fetch(stocksUrl)\n      .then((res) => {\n        debugger;\n        return res.text();\n      })\n      .then((res) => {\n        const currentPrice = parseFloat(res.split(\"\\n\")[1].split(\",\")[4]);\n        setPrice(isNaN(currentPrice) ? 0 : currentPrice.toFixed(2));\n      })\n      .catch((error) => {\n        debugger;\n        console.log(error);\n      });\n  };\n  React.useEffect(() => {\n    getCurrentPrice(stock.symbol);\n  }, [stock.symbol]);\n  const getProfit = (buyPrice, noOfShares) => {\n    const buyPriceFloat = isNaN(parseFloat(buyPrice))\n      ? 0\n      : parseFloat(buyPrice);\n    const number = isNaN(parseFloat(noOfShares)) ? 0 : parseFloat(noOfShares);\n    const change = currentPrice * number - buyPriceFloat * number;\n    return change;\n  };\n  return (\n    <tr key={stock.symbol}>\n      <td>{stock.symbol}</td>\n      <td>{stock.name}</td>\n      <td>{stock.shares}</td>\n      <td>{stock.buyprice}</td>\n      <td>{currentPrice}</td>\n      <td>{getProfit(stock.buyprice, stock.shares)}</td>\n      <td>\n        <button\n          className=\"StopTrackingBtn\"\n          id={stock.symbol}\n          onClick={removeMyStock}\n        >\n          Stop Tracking\n        </button>\n      </td>\n    </tr>\n  );\n};\nexport default MyStockRow;\n","//export const API_KEY = \"K4C1OCSP489EZS33\";\nexport const API_KEY = \"5CF1O9FBXRKM2TA7\";\nexport const stocksUrl =\n  \"https://financial-portfolio-trac-73f3e.firebaseio.com/addStocks.json\";\n\nexport const getStockPriceApi = (symbol) =>\n  `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}&datatype=csv`;\n","import React, { Component } from \"react\";\nimport \"./MyStocks.css\";\nimport axios from \"axios\";\nimport MyStocksHeader from \"./MyStocksHeader\";\nimport MyStockRow from \"./MyStockRow\";\nclass MyStocks extends Component {\n  createMyStockLIs = () => {\n    const myStockArray = [];\n    for (let stockKey in this.props.stocks) {\n      const stock = this.props.stocks[stockKey];\n      if (!stock.isUser) {\n        continue;\n      } else {\n        myStockArray.push(stock);\n      }\n    }\n    const stockLIs = myStockArray.map((stock) => (\n      <MyStockRow\n        key={stock.symbol}\n        stock={stock}\n        removeMyStock={this.handleDelete.bind(this, stock)}\n      />\n    ));\n    return stockLIs;\n  };\n  handleDelete = (stock) => {\n    axios\n      .put(\n        \"https://financial-portfolio-trac-73f3e.firebaseio.com/addStocks/\" +\n          stock.symbol +\n          \".json\",\n        {\n          symbol: stock.symbol,\n          name: stock.name,\n          isUser: false,\n        }\n      )\n      .then((res) => {\n        console.log(res.data);\n        this.props.updateStocks();\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"MyStocks\">\n        <h2>My Stocks</h2>\n        <table>\n          <MyStocksHeader />\n          <tbody>{this.createMyStockLIs()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default MyStocks;\n","import React, { Component } from \"react\";\nimport \"./Modal.css\";\nimport Axios from \"axios\";\n\nclass Modal extends Component {\n  putRequest = (stock) => {\n    let shares = document.getElementById(\"noShares\").value;\n    let buyprice = document.getElementById(\"buyPrice\").value;\n    let buydate = document.getElementById(\"buyDate\").value;\n\n    if (shares > 0 && buyprice > 0) {\n      Axios.put(\n        `https://financial-portfolio-trac-73f3e.firebaseio.com/addStocks/` +\n          this.props.selectedStock.symbol +\n          `.json`,\n        {\n          symbol: this.props.selectedStock.symbol,\n          name: this.props.selectedStock.name,\n          isUser: true,\n          shares: shares,\n          buyprice: buyprice,\n          buydate: buydate,\n        }\n      )\n        .then(() => this.props.updateStocks())\n        .then(() => this.props.toggle());\n    } else {\n      alert(\"Please fill all the fields!\");\n    }\n  };\n\n  render() {\n    if (!this.props.show) {\n      return null;\n    }\n    return (\n      <>\n        <div className=\"AddStockForm\">\n          <div className=\"modal-content\">\n            <span className=\"close\" onClick={() => this.props.toggle()}>\n              &times;\n            </span>\n            <h1>Add {this.props.selectedStock?.name} to my stocks</h1>\n            <div>\n              <span className=\"modal-label\">Company Name :</span>\n              <span className=\"modal-value\">\n                {this.props.selectedStock?.name}\n              </span>\n            </div>\n            <br></br>\n            <br></br>\n            <div>\n              <span className=\"modal-label\">No. of Shares :</span>\n              <input\n                id=\"noShares\"\n                type=\"number\"\n                className=\"modal-value\"\n                min=\"1\"\n                placeholder=\"No. of shares\"\n              ></input>\n            </div>\n            <br></br>\n            <br></br>\n            <div>\n              <span className=\"modal-label\">Buy Price :</span>\n              <div className=\"modal-value\">\n                <strong>&#8377;</strong>&nbsp;\n                <input\n                  id=\"buyPrice\"\n                  type=\"number\"\n                  min=\"1\"\n                  placeholder=\"Buy Price\"\n                ></input>\n              </div>\n            </div>\n            <br></br>\n            <br></br>\n            <div>\n              <span className=\"modal-label\">Buy Date :</span>\n              <input id=\"buyDate\" type=\"date\" className=\"modal-value\"></input>\n            </div>\n            <br></br>\n            <br></br>\n            <div style={{ textAlign: \"center\" }}>\n              <button\n                id=\"modaladdbtn\"\n                className=\"AddButton\"\n                onClick={this.putRequest.bind(this, this.props.selectedStock)}\n              >\n                Add\n              </button>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Modal;\n","import React, { Component } from \"react\";\nimport \"./AddStocks.css\";\nimport Modal from \"../Modal/Modal.js\";\nclass AddStocks extends Component {\n  state = {\n    stockList: {},\n    isModalVisible: false,\n  };\n\n  addStockHandler = (stock) => {\n    let selectedStock = { ...stock };\n    this.setState({\n      isModalVisible: true,\n      selectedStock,\n    });\n  };\n  toggleModal = () => {\n    this.setState({ isModalVisible: false });\n  };\n\n  createStockLIs = () => {\n    let stockLIs = [];\n    for (let stockKey in this.props.stocks) {\n      const stock = this.props.stocks[stockKey];\n      if (stock.isUser) {\n        continue;\n      }\n      stockLIs.push(\n        <li key={stock.symbol}>\n          <button\n            className=\"StockButton\"\n            id={stock.symbol}\n            onClick={this.addStockHandler.bind(this, stock)}\n          >\n            {stock.symbol}\n          </button>\n          &nbsp;\n          <span>{stock.name}</span>\n          <br />\n          <br />\n        </li>\n      );\n    }\n    return stockLIs;\n  };\n  render() {\n    return (\n      <div className=\"AddStocksTitle\">\n        <h2>Add stocks to my Stocks</h2>\n        <ul>{this.createStockLIs()}</ul>\n        <Modal\n          show={this.state.isModalVisible}\n          selectedStock={this.state.selectedStock}\n          toggle={this.toggleModal}\n          updateStocks={this.props.updateStocks}\n        />\n      </div>\n    );\n  }\n}\nexport default AddStocks;\n","import React from \"react\";\nimport \"./HorizontalLine.css\";\nfunction HorizontalLine() {\n  return <div className=\"line\"></div>;\n}\nexport default HorizontalLine;\n","import React from \"react\";\nimport axios from \"axios\";\nimport MyStocks from \"./MyStocks/MyStocks\";\nimport AddStocks from \"./AddStocks/AddStocks\";\nimport { stocksUrl } from \"../env\";\nimport HorizontalLine from \"./Horizontal Line/HorizontalLine\";\n\nconst StockWrapper = (props) => {\n  const [stocks, setStocks] = React.useState([]);\n  const [fetchStocks, setFetchStocks] = React.useState(0);\n\n  React.useEffect(() => {\n    axios\n      .get(stocksUrl)\n      .then((res) => {\n        setStocks(res.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, [fetchStocks]);\n\n  return (\n    <>\n      <MyStocks\n        updateStocks={() => setFetchStocks((s) => s + 1)}\n        stocks={stocks}\n      />\n      <HorizontalLine />\n      <AddStocks\n        updateStocks={() => setFetchStocks((s) => s + 1)}\n        stocks={stocks}\n      />\n    </>\n  );\n};\n\nexport default StockWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport StockWrapper from \"./components/StockWrapper\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Navbar />\n    <StockWrapper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}